# w_scan_cpp-binaries

This is the collection of w_scan_cpp binaries.


Those binaries may or may not work for you. They have been either created by me,
or, have been contributed by others.

Some of those binaries rely on librepfunc on your system.
You may - or may not - need to install this lib too; depending on who build the binary,
how the binary was build, which version of w_scan_cpp is packaged.

If want to show up your w_scan_cpp binary here, contact me.




some hints:
* w_scan_cpp-YYYYMMDD-binary-SYSTEM.tar.bz2
  - SYSTEM == x86_64 : AMD/INTEL x86 64bit
  - SYSTEM == aarch64: 64bit embedded ARM System, for RPi-3B/3B+/4/400/CM3/CM3+/CM4/Zero2W
  - SYSTEM == armv7l: 32bit embedded ARM System, (runs on any RPi)
* .deb debian package, name gives further info, like bullseye or buster
* the date YYYYMMDD may/may not reflect the *build date* instead of the *packaged w_scan_cpp version*.
  If so, it is expected that this is the latest git version for this date, instead of a released one.
* There may/may not be a dependency on librepfunc. Build it, or get a binary separately.

Examples:
* w_scan_cpp-20210218-1_amd64.deb
  - generic Debian dpkg Package build #1, 64bit x86, w_scan_cpp-20210218
* w_scan_cpp-20210331-1bullseye_amd64.deb
  - Debian bullseye dpkg Package build #1, 64bit x86, w_scan_cpp-20210331
* w_scan_cpp-20220119-binary-aarch64.tar.bz2
  - bz2 compressed tarball, 64bit embedded System for RPi-3B/3B+/4/400/CM3/CM3+/CM4/Zero2W
  
Up to now, binaries are here for
* Debian (Intel/AMD) x86 deb Packages, 32bit and 64bit for Duster and Bullseye.
  For most recent multiarch Docker containers, you may want to check also: https://github.com/urfin78/w_scan_cpp-container 
* Linux From Scratch build binaries for x86 64bit (LFS user dont need them really btw. :D)
* Raspberry Pi Raspian OS binaries, 32bit (armv7x) and 64bit (aarch64)
* Armbian OS binaries (should run on many ARM dev boards)
* Hardkernel Ubuntu Mate Packages for Odroid XU*/HC* (ie. XU4Q)

There are also install scripts here, which may help for your distribution.
Those scripts should be placed into /usr/src and made executable ('chmod a+x <script>').
If they run successfully, those scripts produce one of those famous binaries as stored here - fresh && warm.
Also they create tarballs for librepfunc (if required for your distri) and w_scan_cpp.
It's recommended to get fresh package lists before hand.


--wirbel
